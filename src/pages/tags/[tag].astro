---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const allPosts = await getCollection('posts', ({ data }) => !data.draft);
  const uniqueTags = [...new Set(allPosts.flatMap((post) => post.data.tags))];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.data.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;

const sortedPosts = posts.sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
---

<BaseLayout pageTitle={`Tag: ${tag}`}>
  <div class="tag-container">
    <div class="tag-header">
      <h2 class="tag-title">{tag}</h2>
      <p class="tag-info">{posts.length} article{posts.length !== 1 ? 's' : ''} tagged</p>
    </div>

    {sortedPosts.length === 0 ? (
      <p class="no-posts">No posts found with this tag.</p>
    ) : (
      <ul class="posts-list">
        {sortedPosts.map((post) => (
          <li class="post-item">
            <article>
              <div class="post-item-meta">
                <span class="category">{post.data.category}</span>
                <time datetime={post.data.pubDate.toISOString()}>
                  {post.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' })}
                </time>
              </div>
              <h3>
                <a href={`/posts/${post.slug}`}>{post.data.title}</a>
              </h3>
              <p class="post-description">{post.data.description}</p>
              <a href={`/posts/${post.slug}`} class="read-more">Read more â†’</a>
            </article>
          </li>
        ))}
      </ul>
    )}
  </div>
</BaseLayout>

<style>
  .tag-container {
    max-width: 65ch;
    margin: 2rem auto;
    padding: 0 1rem;
  }

  .tag-header {
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid #e5e5e5;
  }

  .tag-title {
    font-size: 2rem;
    margin: 0 0 0.5rem 0;
    color: #1a1a1a;
  }

  .tag-info {
    color: #888;
    font-size: 0.95rem;
    margin: 0;
  }

  .posts-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .post-item {
    margin-bottom: 2.5rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #e5e5e5;
  }

  .post-item:last-child {
    border-bottom: none;
  }

  .post-item-meta {
    display: flex;
    gap: 1rem;
    margin-bottom: 0.75rem;
    font-size: 0.9rem;
    color: #888;
  }

  .category {
    display: inline-block;
    background-color: #e8f4f8;
    color: #0c5f7f;
    padding: 0.25rem 0.75rem;
    border-radius: 0.25rem;
    font-weight: 600;
    font-size: 0.8rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .post-item h3 {
    margin: 0.75rem 0 0.5rem 0;
    font-size: 1.5rem;
    line-height: 1.3;
  }

  .post-item h3 a {
    color: #1a1a1a;
    text-decoration: none;
    transition: color 0.2s;
  }

  .post-item h3 a:hover {
    color: #00539F;
  }

  .post-description {
    color: #555;
    margin: 0.75rem 0;
    line-height: 1.6;
    font-size: 0.95rem;
  }

  .read-more {
    display: inline-block;
    color: #00539F;
    text-decoration: none;
    font-weight: 500;
    margin-top: 0.75rem;
    transition: color 0.2s;
  }

  .read-more:hover {
    color: #003d7a;
  }

  .no-posts {
    text-align: center;
    color: #999;
    padding: 2rem 0;
  }

  @media (max-width: 636px) {
    .tag-container {
      margin: 1rem 0;
    }

    .tag-title {
      font-size: 1.5rem;
    }

    .post-item h3 {
      font-size: 1.2rem;
    }

    .post-item-meta {
      flex-wrap: wrap;
      gap: 0.5rem;
    }
  }
</style>